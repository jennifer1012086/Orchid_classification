{"cells":[{"metadata":{"_uuid":"77c9b4cc1efaa0a4544f0e8ae2844264df1f0e90","id":"J8T9IDvOG324"},"cell_type":"markdown","source":["<a id=\"content1\"></a>\n","## 1 ) Importing Various Modules."]},{"cell_type":"code","source":["!pip install keras"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"geEGQ0d7L07k","executionInfo":{"status":"ok","timestamp":1654864644594,"user_tz":-480,"elapsed":3152,"user":{"displayName":"林翊婷","userId":"17064522885913402879"}},"outputId":"65baa81f-6c7c-425e-9afb-8fd599b88abd"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: keras in /usr/local/lib/python3.7/dist-packages (2.8.0)\n"]}]},{"metadata":{"id":"z19bVm7o9zeu","trusted":true,"_uuid":"4902ee7b7f4d66a42d59b971180bba213d0133c9","executionInfo":{"status":"ok","timestamp":1654864650601,"user_tz":-480,"elapsed":3014,"user":{"displayName":"林翊婷","userId":"17064522885913402879"}}},"cell_type":"code","source":["# Ignore  the warnings\n","import warnings\n","warnings.filterwarnings('always')\n","warnings.filterwarnings('ignore')\n","\n","# data visualisation and manipulation\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from matplotlib import style\n","import seaborn as sns\n"," \n","#configure\n","# sets matplotlib to inline and displays graphs below the corressponding cell.\n","%matplotlib inline  \n","style.use('fivethirtyeight')\n","sns.set(style='whitegrid',color_codes=True)\n","\n","#model selection\n","from sklearn.model_selection import train_test_split\n","from sklearn.model_selection import KFold\n","from sklearn.metrics import accuracy_score,precision_score,recall_score,confusion_matrix,roc_curve,roc_auc_score\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.preprocessing import LabelEncoder\n","\n","#preprocess.\n","from keras.preprocessing.image import ImageDataGenerator\n","\n","#dl libraraies\n","from keras import backend as K\n","from keras.models import Sequential\n","from keras.layers import Dense\n","from tensorflow.keras.optimizers import Adam,SGD,Adagrad,Adadelta,RMSprop\n","from tensorflow.keras.utils import to_categorical, set_random_seed\n","from keras.callbacks import ReduceLROnPlateau\n","\n","# specifically for cnn\n","from keras.layers import Dropout, Flatten,Activation\n","from keras.layers import Conv2D, MaxPooling2D, BatchNormalization\n"," \n","import tensorflow as tf\n","import random as rn\n","\n","# specifically for manipulating zipped images and getting numpy arrays of pixel values of images.\n","import cv2                  \n","import numpy as np  \n","from tqdm import tqdm\n","import os                   \n","from random import shuffle  \n","from zipfile import ZipFile\n","from PIL import Image\n","\n","#TL pecific modules\n","from keras.applications.vgg16 import VGG16\n","from tensorflow.keras.applications.resnet50 import ResNet50"],"execution_count":2,"outputs":[]},{"metadata":{"_uuid":"1fa0f050be4d3796a3253bc22c0d87393d55902a","id":"htUFKaOLG33E"},"cell_type":"markdown","source":["<a id=\"content2\"></a>\n","## 2 ) Preparing the Data"]},{"metadata":{"_uuid":"192e68db5329da0e491aba8f12a6ca5cda534ce9","id":"567F79KPG33G"},"cell_type":"markdown","source":["## 2.1) Making the functions to get the training and validation set from the Images"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zWV8jTSCKtD4","executionInfo":{"status":"ok","timestamp":1654864678353,"user_tz":-480,"elapsed":25555,"user":{"displayName":"林翊婷","userId":"17064522885913402879"}},"outputId":"9d857a4a-ab28-4154-c4e6-f507c9298550"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"metadata":{"id":"abZS8dPk9ze1","trusted":true,"_uuid":"7b0c13e69deaf6449739ba2104bb6238be376f05","executionInfo":{"status":"ok","timestamp":1654864681091,"user_tz":-480,"elapsed":369,"user":{"displayName":"林翊婷","userId":"17064522885913402879"}}},"cell_type":"code","source":["X=[]\n","Z=[]\n","IMG_SIZE=150\n","DIR='/content/drive/MyDrive/大四(下)/機器學習/orchid/training/train/'\n","weights_path='/content/drive/MyDrive/大四(下)/機器學習/orchid/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5'"],"execution_count":4,"outputs":[]},{"metadata":{"id":"2qPgwo1d9ze4","trusted":true,"_uuid":"1c467392d43ee29671c5498bd1feea5db5ef862d","executionInfo":{"status":"ok","timestamp":1654864684492,"user_tz":-480,"elapsed":3,"user":{"displayName":"林翊婷","userId":"17064522885913402879"}}},"cell_type":"code","source":["def assign_label(img,flower_type):\n","    return flower_type"],"execution_count":5,"outputs":[]},{"metadata":{"id":"vlY8PywM9ze7","trusted":true,"_uuid":"861b4e251d97f7601a3bc2c3077183de4122e3d9","executionInfo":{"status":"ok","timestamp":1654864686543,"user_tz":-480,"elapsed":2,"user":{"displayName":"林翊婷","userId":"17064522885913402879"}}},"cell_type":"code","source":["def make_train_data(flower_type,DIR):\n","    for img in tqdm(os.listdir(DIR)):\n","        label=assign_label(img,flower_type)\n","        path = os.path.join(DIR,img)\n","        img = cv2.imread(path,cv2.IMREAD_COLOR)\n","        img = cv2.resize(img, (IMG_SIZE,IMG_SIZE))\n","        \n","        X.append(np.array(img))\n","        Z.append(int(label))"],"execution_count":6,"outputs":[]},{"cell_type":"code","source":["for i in range(219):\n","    make_train_data(str(i), DIR+str(i))"],"metadata":{"id":"W_xdIzIEI5j5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654866016335,"user_tz":-480,"elapsed":1326773,"user":{"displayName":"林翊婷","userId":"17064522885913402879"}},"outputId":"2cb3cfa7-c320-4a4d-889c-975e4085c22a"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 10/10 [00:05<00:00,  1.70it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.71it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.73it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.74it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.57it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.78it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.83it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.49it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.72it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.82it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.55it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.74it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.60it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.69it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.63it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.74it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.70it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.66it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.78it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.94it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.66it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.70it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.90it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.70it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.72it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.71it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.79it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.72it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.60it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.69it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.49it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.63it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.81it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.71it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.82it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.67it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.81it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.65it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.63it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.76it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.70it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.61it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.63it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.69it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.53it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.67it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.53it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.49it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.67it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.66it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.55it/s]\n","100%|██████████| 10/10 [00:08<00:00,  1.23it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.63it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.83it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.65it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.64it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.72it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.45it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.68it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.55it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.51it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.71it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.59it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.78it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.96it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.71it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.69it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.56it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.63it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.80it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.68it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.70it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.76it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.79it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.68it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.72it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.55it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.67it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.58it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.50it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.67it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.61it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.49it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.63it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.64it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.74it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.70it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.68it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.72it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.71it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.81it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.54it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.59it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.65it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.61it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.72it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.63it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.73it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.74it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.67it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.75it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.78it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.64it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.71it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.51it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.48it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.84it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.78it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.49it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.73it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.79it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.71it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.93it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.73it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.60it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.76it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.79it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.81it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.63it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.59it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.71it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.75it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.96it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.76it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.69it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.99it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.71it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.61it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.74it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.67it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.80it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.75it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.75it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.66it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.81it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.64it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.63it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.67it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.87it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.70it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.80it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.72it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.70it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.71it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.67it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.60it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.79it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.76it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.70it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.65it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.52it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.67it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.72it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.57it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.57it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.84it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.85it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.68it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.77it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.60it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.80it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.65it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.65it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.57it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.60it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.75it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.77it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.56it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.63it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.75it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.73it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.67it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.72it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.66it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.66it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.75it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.62it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.74it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.65it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.73it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.66it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.66it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.72it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.60it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.76it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.77it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.59it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.57it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.71it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.73it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.66it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.65it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.71it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.71it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.83it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.93it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.72it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.75it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.68it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.67it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.77it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.77it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.67it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.54it/s]\n","100%|██████████| 10/10 [00:09<00:00,  1.02it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.73it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.72it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.75it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.66it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.78it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.86it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.74it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.71it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.74it/s]\n","100%|██████████| 10/10 [00:08<00:00,  1.13it/s]\n","100%|██████████| 10/10 [00:05<00:00,  1.77it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.51it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.62it/s]\n","100%|██████████| 10/10 [00:06<00:00,  1.65it/s]\n"]}]},{"metadata":{"_uuid":"963b723dd10cb918fa045588a5dfa07d55007db3","id":"jS4B1HDpG33U"},"cell_type":"markdown","source":["## 2.3 ) One Hot Encoding "]},{"metadata":{"id":"_Gug0CHU9zfe","trusted":true,"_uuid":"1f006ba66f46d8c3355ecdd3b27b37bdea635944","executionInfo":{"status":"ok","timestamp":1654866189201,"user_tz":-480,"elapsed":955,"user":{"displayName":"林翊婷","userId":"17064522885913402879"}}},"cell_type":"code","source":["Y=to_categorical(Z,219)\n","X=np.array(X)\n","X=X/255"],"execution_count":8,"outputs":[]},{"metadata":{"_uuid":"d6a8f93a1446fa61e9c89a61be3a0fbb4328ad15","id":"rn4A7IWcG33W"},"cell_type":"markdown","source":["## 2.4 ) Splitting into Training and Validation Sets"]},{"metadata":{"id":"4xogXfvm9zfg","trusted":true,"_uuid":"e9b04ed0a732e99941d6a347a14d66eb2cb4727b","executionInfo":{"status":"ok","timestamp":1654866192958,"user_tz":-480,"elapsed":409,"user":{"displayName":"林翊婷","userId":"17064522885913402879"}}},"cell_type":"code","source":["x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.25,random_state=42)"],"execution_count":9,"outputs":[]},{"metadata":{"_uuid":"10556b8fcdde09321078b4fa4df9e9dc651f877a","id":"rrPlhVbHG33Y"},"cell_type":"markdown","source":["## 2.5 ) Setting the Random Seeds"]},{"metadata":{"id":"S_nM3vLf9zfj","trusted":true,"_uuid":"f0e2ae22e3bca8e3143d5b4d312460283b833878","executionInfo":{"status":"ok","timestamp":1654866196338,"user_tz":-480,"elapsed":412,"user":{"displayName":"林翊婷","userId":"17064522885913402879"}}},"cell_type":"code","source":["np.random.seed(42)\n","rn.seed(42)\n","set_random_seed(42)"],"execution_count":10,"outputs":[]},{"metadata":{"_uuid":"82aa7c88a3fac8f8596ce70653900664f2b61ad4","id":"7EZFTVJwG33Z"},"cell_type":"markdown","source":["<a id=\"content3\"></a>\n","## 3 ) Modelling"]},{"metadata":{"_uuid":"550936cbbc153229adb624c2c31050c5d93c2a8e","id":"hN7rVC-BG33a"},"cell_type":"markdown","source":["## 3.1 ) Specifying the Base Model"]},{"metadata":{"_uuid":"42730871d9f28580dab21b9e15c6b65c67e8a5e6","id":"ejeb86pVG33b"},"cell_type":"markdown","source":["Transfer learning refers to using a pretrained model on some other task for your own task. Hence we need to specify the particular model which we are deploying in our task and thus needs to specify the base model.\n","\n","In our case we are using the VGG16 model from the Keras.Applications library as the base model."]},{"metadata":{"id":"SERVVhIgkxXV","trusted":true,"_uuid":"33b31b3df570b37c968f4c4e81ea24b48c864caa","executionInfo":{"status":"ok","timestamp":1654866203414,"user_tz":-480,"elapsed":4163,"user":{"displayName":"林翊婷","userId":"17064522885913402879"}}},"cell_type":"code","source":["base_model=VGG16(include_top=False, weights=None,input_shape=(150,150,3), pooling='avg')\n","# base_model=ResNet50(include_top=False, weights=\"imagenet\",input_shape=(256, 256,3), pooling='avg') "],"execution_count":11,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9155aceff9ad2d42cbd5b9151389d2f15e8c7abd","id":"AZq6vdaBG33c","executionInfo":{"status":"ok","timestamp":1654866207502,"user_tz":-480,"elapsed":2355,"user":{"displayName":"林翊婷","userId":"17064522885913402879"}}},"cell_type":"code","source":["base_model.load_weights(weights_path)"],"execution_count":12,"outputs":[]},{"metadata":{"_uuid":"0113e4773b50a6aa8434865fe1657d6859d25d71","id":"HVnHjj1cG33d"},"cell_type":"markdown","source":["#### BREAKING IT DOWN--\n","\n","1) Firstly we import the VGG16 module from the Keras library.\n","\n","2) Next we need to specify if we want  to use the fully connected layers of the VGG16 module or own layers. Since our task is different and we have only 5 target classes we need to have our own layers and I have specified the 'include_top' arguement as 'False'.\n","\n","3) Next we need to specify the weights to be used by the model. Since I want it to use the weights it was trained on in ImageNet competition, I have loaded the weights from the corressponding file. You can directly specify the weights arguement as 'imagenet' in VGG16( )  but it didn't work in my case so I have to explicitily load the weghts from a file.\n"," \n","4) Lastly we just need to specify the shape of the imput that our model need to expect and also specify the 'pooling' type."]},{"metadata":{"id":"xHOoktp-k4tw","trusted":true,"_uuid":"3bca9ce0ba74b4bec90b228d7805ce6d64e00062","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654866211106,"user_tz":-480,"elapsed":471,"user":{"displayName":"林翊婷","userId":"17064522885913402879"}},"outputId":"4adb8e3e-c579-4d8c-ad14-b144386eb958"},"cell_type":"code","source":["base_model.summary()"],"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"vgg16\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_1 (InputLayer)        [(None, 150, 150, 3)]     0         \n","                                                                 \n"," block1_conv1 (Conv2D)       (None, 150, 150, 64)      1792      \n","                                                                 \n"," block1_conv2 (Conv2D)       (None, 150, 150, 64)      36928     \n","                                                                 \n"," block1_pool (MaxPooling2D)  (None, 75, 75, 64)        0         \n","                                                                 \n"," block2_conv1 (Conv2D)       (None, 75, 75, 128)       73856     \n","                                                                 \n"," block2_conv2 (Conv2D)       (None, 75, 75, 128)       147584    \n","                                                                 \n"," block2_pool (MaxPooling2D)  (None, 37, 37, 128)       0         \n","                                                                 \n"," block3_conv1 (Conv2D)       (None, 37, 37, 256)       295168    \n","                                                                 \n"," block3_conv2 (Conv2D)       (None, 37, 37, 256)       590080    \n","                                                                 \n"," block3_conv3 (Conv2D)       (None, 37, 37, 256)       590080    \n","                                                                 \n"," block3_pool (MaxPooling2D)  (None, 18, 18, 256)       0         \n","                                                                 \n"," block4_conv1 (Conv2D)       (None, 18, 18, 512)       1180160   \n","                                                                 \n"," block4_conv2 (Conv2D)       (None, 18, 18, 512)       2359808   \n","                                                                 \n"," block4_conv3 (Conv2D)       (None, 18, 18, 512)       2359808   \n","                                                                 \n"," block4_pool (MaxPooling2D)  (None, 9, 9, 512)         0         \n","                                                                 \n"," block5_conv1 (Conv2D)       (None, 9, 9, 512)         2359808   \n","                                                                 \n"," block5_conv2 (Conv2D)       (None, 9, 9, 512)         2359808   \n","                                                                 \n"," block5_conv3 (Conv2D)       (None, 9, 9, 512)         2359808   \n","                                                                 \n"," block5_pool (MaxPooling2D)  (None, 4, 4, 512)         0         \n","                                                                 \n"," global_average_pooling2d (G  (None, 512)              0         \n"," lobalAveragePooling2D)                                          \n","                                                                 \n","=================================================================\n","Total params: 14,714,688\n","Trainable params: 14,714,688\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"metadata":{"_uuid":"33a8724542cdac2b9002fbbd3db0400ebedcac0d","id":"OEJxjmRCG33f"},"cell_type":"markdown","source":["Note that this is NOT the summary of our model and this is the summary or the ARCHITECTURE of the VGG16 model that we are deploying as the base model."]},{"metadata":{"_uuid":"fe17a74b47da287a0b8763096d1e47beac1be85f","id":"gV0rfiEMG33g"},"cell_type":"markdown","source":["## 3.2 ) Adding our Own Fully Connected Layers"]},{"metadata":{"_uuid":"c1285074e54048895fa46f28ce94327dcb1fd2a7","id":"5-QKTQ91G33g"},"cell_type":"markdown","source":["Now we need to add at the top of the base model some fully connected layers. Alsowe can use the BatchNormalization and the Dropout layers as usual in case we want to.\n","\n","For this I have used a Keras sequential model and build our entire model on top of it; comprising of the VGG model as the base model + our own fully connected layers."]},{"metadata":{"id":"gGgMscM_eIYS","trusted":true,"_uuid":"61461000564043bcdd7dcafc2f99bf931eaecfa0","executionInfo":{"status":"ok","timestamp":1654866216100,"user_tz":-480,"elapsed":390,"user":{"displayName":"林翊婷","userId":"17064522885913402879"}}},"cell_type":"code","source":["model=Sequential()\n","model.add(base_model)\n","\n","model.add(Dense(256,activation='relu'))\n","model.add(Dense(219,activation='softmax'))"],"execution_count":14,"outputs":[]},{"metadata":{"_uuid":"3d14eeca7ad5f8e01a4d868a2dda5dc4111387fb","id":"jqLmmgFBG33i"},"cell_type":"markdown","source":["## 3.3 ) Data Augmentation to prevent Overfitting"]},{"metadata":{"id":"lH038cfsgkvZ","trusted":true,"_uuid":"5859d726c293f373e7ee955bb931bd28f39db8d5","executionInfo":{"status":"ok","timestamp":1654866220725,"user_tz":-480,"elapsed":985,"user":{"displayName":"林翊婷","userId":"17064522885913402879"}}},"cell_type":"code","source":["datagen = ImageDataGenerator(\n","        featurewise_center=False,  # set input mean to 0 over the dataset\n","        samplewise_center=False,  # set each sample mean to 0\n","        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n","        samplewise_std_normalization=False,  # divide each input by its std\n","        zca_whitening=False,  # apply ZCA whitening\n","        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n","        zoom_range = 0.1, # Randomly zoom image \n","        width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)\n","        height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)\n","        horizontal_flip=True,  # randomly flip images\n","        vertical_flip=False)  # randomly flip images\n","\n","\n","datagen.fit(X)"],"execution_count":15,"outputs":[]},{"metadata":{"_uuid":"fe28d78ca7d6f7af58b8bbaa6c4cf6a377f725b5","id":"qHp0nGnfG33j"},"cell_type":"markdown","source":["## 3.4 ) Using a Learning Rate Annealer & the Summary"]},{"metadata":{"id":"B_6-fsX6gky4","trusted":true,"_uuid":"0953cdcd6425381a3551aeb28af6c4b61654849d","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654866224910,"user_tz":-480,"elapsed":415,"user":{"displayName":"林翊婷","userId":"17064522885913402879"}},"outputId":"a9a5e3d2-6bce-409f-fa26-5c7c6b9e74f1"},"cell_type":"code","source":["epochs=50\n","batch_size=128\n","red_lr=ReduceLROnPlateau(monitor='val_acc', factor=0.1, epsilon=0.0001, patience=2, verbose=1)"],"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["WARNING:tensorflow:`epsilon` argument is deprecated and will be removed, use `min_delta` instead.\n"]}]},{"metadata":{"id":"IVxD9F-TeIdi","trusted":true,"_uuid":"c18c97375cbdde67228b22780bff5a0230598c71","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654866242533,"user_tz":-480,"elapsed":369,"user":{"displayName":"林翊婷","userId":"17064522885913402879"}},"outputId":"87fa00ad-2be1-4c2f-ff0a-73c36387abe4"},"cell_type":"code","source":["model.summary()"],"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," vgg16 (Functional)          (None, 512)               14714688  \n","                                                                 \n"," dense (Dense)               (None, 256)               131328    \n","                                                                 \n"," dense_1 (Dense)             (None, 219)               56283     \n","                                                                 \n","=================================================================\n","Total params: 14,902,299\n","Trainable params: 14,902,299\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"metadata":{"_uuid":"9e930633508ea7464b06a0e6081f3d162537de46","id":"RJsPVfsRG33l"},"cell_type":"markdown","source":["This is now the complete summary of our model that we shall use to classify the images."]},{"metadata":{"_uuid":"5a36c2ecfbc0b8dc2407be3e685ce235e420a198","id":"1WnG2ERqG33m"},"cell_type":"markdown","source":["## 3.5 ) Compiling & Training the Model"]},{"metadata":{"_uuid":"7957e2a9e323de85d99f72cf1af44f078ccc5e11","id":"_s6rYm8OG33p"},"cell_type":"markdown","source":["#### 3.5.2 ) FINE TUNING BY UNFREEZING THE LAST BLOCK OF VGG16"]},{"metadata":{"_uuid":"0deafdf0a87be6b94cf8e34e4e69e0c525afd1b0","id":"I0rOrti0G33q"},"cell_type":"markdown","source":["In this section I have done fine tuning. To see the effect of the fine tuning I have first unfreezed the last block of the VGG16 model and have set it to trainable."]},{"metadata":{"id":"ZcwBRzYYPVx8","trusted":true,"_uuid":"1efcc1bd4b8c809998052b4edf9bfd72a7467ad9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654866246587,"user_tz":-480,"elapsed":4,"user":{"displayName":"林翊婷","userId":"17064522885913402879"}},"outputId":"1fc16121-615c-4a56-f5bd-01ce87fc34eb"},"cell_type":"code","source":["for i in range (len(base_model.layers)):\n","    print (i,base_model.layers[i])\n","  \n","for layer in base_model.layers[15:]:\n","    layer.trainable=True\n","for layer in base_model.layers[0:15]:\n","    layer.trainable=False\n","  "],"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["0 <keras.engine.input_layer.InputLayer object at 0x7fba92596dd0>\n","1 <keras.layers.convolutional.Conv2D object at 0x7fba8814e310>\n","2 <keras.layers.convolutional.Conv2D object at 0x7fba88153a90>\n","3 <keras.layers.pooling.MaxPooling2D object at 0x7fba801a77d0>\n","4 <keras.layers.convolutional.Conv2D object at 0x7fba801c5d90>\n","5 <keras.layers.convolutional.Conv2D object at 0x7fba801a7310>\n","6 <keras.layers.pooling.MaxPooling2D object at 0x7fba801cc890>\n","7 <keras.layers.convolutional.Conv2D object at 0x7fba801cefd0>\n","8 <keras.layers.convolutional.Conv2D object at 0x7fba88153f90>\n","9 <keras.layers.convolutional.Conv2D object at 0x7fba801cad90>\n","10 <keras.layers.pooling.MaxPooling2D object at 0x7fba8015f410>\n","11 <keras.layers.convolutional.Conv2D object at 0x7fba80162d50>\n","12 <keras.layers.convolutional.Conv2D object at 0x7fba8015f0d0>\n","13 <keras.layers.convolutional.Conv2D object at 0x7fba8016b590>\n","14 <keras.layers.pooling.MaxPooling2D object at 0x7fba80174690>\n","15 <keras.layers.convolutional.Conv2D object at 0x7fba80170390>\n","16 <keras.layers.convolutional.Conv2D object at 0x7fba80158490>\n","17 <keras.layers.convolutional.Conv2D object at 0x7fba80182750>\n","18 <keras.layers.pooling.MaxPooling2D object at 0x7fba80185710>\n","19 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7fba80158390>\n"]}]},{"metadata":{"id":"U6-PRjikXAoK","trusted":true,"_uuid":"67f268c689a28c44745f42658b1937d54ea2504c","executionInfo":{"status":"ok","timestamp":1654866259296,"user_tz":-480,"elapsed":393,"user":{"displayName":"林翊婷","userId":"17064522885913402879"}}},"cell_type":"code","source":["model.compile(optimizer=Adam(lr=1e-4),loss='categorical_crossentropy',metrics=['accuracy'])\n","\n"],"execution_count":19,"outputs":[]},{"metadata":{"id":"8HOQuHdyTfj9","trusted":true,"_uuid":"21fbf26cc0c2aab15e7c5903c2f92ef6a736c213","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654867978448,"user_tz":-480,"elapsed":1716111,"user":{"displayName":"林翊婷","userId":"17064522885913402879"}},"outputId":"c97a4108-f36f-40fb-810e-cfba33bc3d68"},"cell_type":"code","source":["History = model.fit_generator(datagen.flow(X,Y, batch_size=batch_size),\n","                              epochs = 100,\n","                              verbose = 1, steps_per_epoch=X.shape[0] // batch_size)"],"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","17/17 [==============================] - 29s 707ms/step - loss: 5.4029 - accuracy: 0.0073\n","Epoch 2/100\n","17/17 [==============================] - 13s 732ms/step - loss: 5.2045 - accuracy: 0.0230\n","Epoch 3/100\n","17/17 [==============================] - 12s 698ms/step - loss: 4.9093 - accuracy: 0.0587\n","Epoch 4/100\n","17/17 [==============================] - 12s 693ms/step - loss: 4.5186 - accuracy: 0.0912\n","Epoch 5/100\n","17/17 [==============================] - 12s 697ms/step - loss: 4.0259 - accuracy: 0.1353\n","Epoch 6/100\n","17/17 [==============================] - 12s 702ms/step - loss: 3.4527 - accuracy: 0.2241\n","Epoch 7/100\n","17/17 [==============================] - 12s 700ms/step - loss: 3.1022 - accuracy: 0.2711\n","Epoch 8/100\n","17/17 [==============================] - 12s 698ms/step - loss: 2.6245 - accuracy: 0.3681\n","Epoch 9/100\n","17/17 [==============================] - 12s 707ms/step - loss: 2.2403 - accuracy: 0.4384\n","Epoch 10/100\n","17/17 [==============================] - 12s 696ms/step - loss: 1.9227 - accuracy: 0.5048\n","Epoch 11/100\n","17/17 [==============================] - 12s 704ms/step - loss: 1.7022 - accuracy: 0.5606\n","Epoch 12/100\n","17/17 [==============================] - 12s 703ms/step - loss: 1.4502 - accuracy: 0.6169\n","Epoch 13/100\n","17/17 [==============================] - 12s 703ms/step - loss: 1.3458 - accuracy: 0.6305\n","Epoch 14/100\n","17/17 [==============================] - 12s 706ms/step - loss: 1.1990 - accuracy: 0.6848\n","Epoch 15/100\n","17/17 [==============================] - 12s 700ms/step - loss: 1.0653 - accuracy: 0.7095\n","Epoch 16/100\n","17/17 [==============================] - 12s 706ms/step - loss: 1.0096 - accuracy: 0.7207\n","Epoch 17/100\n","17/17 [==============================] - 13s 736ms/step - loss: 0.8278 - accuracy: 0.7780\n","Epoch 18/100\n","17/17 [==============================] - 12s 701ms/step - loss: 0.7126 - accuracy: 0.8036\n","Epoch 19/100\n","17/17 [==============================] - 12s 697ms/step - loss: 0.7155 - accuracy: 0.8172\n","Epoch 20/100\n","17/17 [==============================] - 12s 740ms/step - loss: 0.6640 - accuracy: 0.8167\n","Epoch 21/100\n","17/17 [==============================] - 12s 745ms/step - loss: 0.5708 - accuracy: 0.8506\n","Epoch 22/100\n","17/17 [==============================] - 12s 702ms/step - loss: 0.4622 - accuracy: 0.8754\n","Epoch 23/100\n","17/17 [==============================] - 13s 730ms/step - loss: 0.4352 - accuracy: 0.8860\n","Epoch 24/100\n","17/17 [==============================] - 12s 700ms/step - loss: 0.4601 - accuracy: 0.8826\n","Epoch 25/100\n","17/17 [==============================] - 12s 697ms/step - loss: 0.3848 - accuracy: 0.8991\n","Epoch 26/100\n","17/17 [==============================] - 12s 743ms/step - loss: 0.3460 - accuracy: 0.9127\n","Epoch 27/100\n","17/17 [==============================] - 14s 793ms/step - loss: 0.2935 - accuracy: 0.9258\n","Epoch 28/100\n","17/17 [==============================] - 12s 745ms/step - loss: 0.3038 - accuracy: 0.9239\n","Epoch 29/100\n","17/17 [==============================] - 12s 696ms/step - loss: 0.2542 - accuracy: 0.9399\n","Epoch 30/100\n","17/17 [==============================] - 12s 694ms/step - loss: 0.3513 - accuracy: 0.9093\n","Epoch 31/100\n","17/17 [==============================] - 12s 696ms/step - loss: 0.3016 - accuracy: 0.9355\n","Epoch 32/100\n","17/17 [==============================] - 12s 701ms/step - loss: 0.2130 - accuracy: 0.9544\n","Epoch 33/100\n","17/17 [==============================] - 12s 696ms/step - loss: 0.2175 - accuracy: 0.9491\n","Epoch 34/100\n","17/17 [==============================] - 12s 745ms/step - loss: 0.1586 - accuracy: 0.9685\n","Epoch 35/100\n","17/17 [==============================] - 12s 687ms/step - loss: 0.1252 - accuracy: 0.9801\n","Epoch 36/100\n","17/17 [==============================] - 12s 695ms/step - loss: 0.1447 - accuracy: 0.9651\n","Epoch 37/100\n","17/17 [==============================] - 12s 736ms/step - loss: 0.1335 - accuracy: 0.9728\n","Epoch 38/100\n","17/17 [==============================] - 12s 692ms/step - loss: 0.1001 - accuracy: 0.9816\n","Epoch 39/100\n","17/17 [==============================] - 12s 694ms/step - loss: 0.1069 - accuracy: 0.9753\n","Epoch 40/100\n","17/17 [==============================] - 12s 696ms/step - loss: 0.1257 - accuracy: 0.9733\n","Epoch 41/100\n","17/17 [==============================] - 12s 706ms/step - loss: 0.1197 - accuracy: 0.9762\n","Epoch 42/100\n","17/17 [==============================] - 12s 706ms/step - loss: 0.0818 - accuracy: 0.9850\n","Epoch 43/100\n","17/17 [==============================] - 12s 707ms/step - loss: 0.1668 - accuracy: 0.9583\n","Epoch 44/100\n","17/17 [==============================] - 12s 707ms/step - loss: 0.1050 - accuracy: 0.9767\n","Epoch 45/100\n","17/17 [==============================] - 14s 774ms/step - loss: 0.0825 - accuracy: 0.9859\n","Epoch 46/100\n","17/17 [==============================] - 12s 704ms/step - loss: 0.0701 - accuracy: 0.9893\n","Epoch 47/100\n","17/17 [==============================] - 12s 697ms/step - loss: 0.0525 - accuracy: 0.9922\n","Epoch 48/100\n","17/17 [==============================] - 12s 710ms/step - loss: 0.0502 - accuracy: 0.9893\n","Epoch 49/100\n","17/17 [==============================] - 12s 704ms/step - loss: 0.0511 - accuracy: 0.9913\n","Epoch 50/100\n","17/17 [==============================] - 12s 703ms/step - loss: 0.0698 - accuracy: 0.9874\n","Epoch 51/100\n","17/17 [==============================] - 12s 701ms/step - loss: 0.0679 - accuracy: 0.9825\n","Epoch 52/100\n","17/17 [==============================] - 12s 701ms/step - loss: 0.0493 - accuracy: 0.9927\n","Epoch 53/100\n","17/17 [==============================] - 13s 734ms/step - loss: 0.0533 - accuracy: 0.9917\n","Epoch 54/100\n","17/17 [==============================] - 12s 700ms/step - loss: 0.0466 - accuracy: 0.9922\n","Epoch 55/100\n","17/17 [==============================] - 12s 701ms/step - loss: 0.0447 - accuracy: 0.9927\n","Epoch 56/100\n","17/17 [==============================] - 12s 699ms/step - loss: 0.0467 - accuracy: 0.9903\n","Epoch 57/100\n","17/17 [==============================] - 12s 703ms/step - loss: 0.0704 - accuracy: 0.9869\n","Epoch 58/100\n","17/17 [==============================] - 13s 734ms/step - loss: 0.0621 - accuracy: 0.9871\n","Epoch 59/100\n","17/17 [==============================] - 12s 701ms/step - loss: 0.0498 - accuracy: 0.9903\n","Epoch 60/100\n","17/17 [==============================] - 14s 806ms/step - loss: 0.0576 - accuracy: 0.9893\n","Epoch 61/100\n","17/17 [==============================] - 13s 744ms/step - loss: 0.0532 - accuracy: 0.9913\n","Epoch 62/100\n","17/17 [==============================] - 12s 700ms/step - loss: 0.0610 - accuracy: 0.9874\n","Epoch 63/100\n","17/17 [==============================] - 12s 698ms/step - loss: 0.0901 - accuracy: 0.9791\n","Epoch 64/100\n","17/17 [==============================] - 12s 703ms/step - loss: 0.0531 - accuracy: 0.9908\n","Epoch 65/100\n","17/17 [==============================] - 12s 693ms/step - loss: 0.0410 - accuracy: 0.9937\n","Epoch 66/100\n","17/17 [==============================] - 12s 704ms/step - loss: 0.0588 - accuracy: 0.9864\n","Epoch 67/100\n","17/17 [==============================] - 12s 699ms/step - loss: 0.0491 - accuracy: 0.9918\n","Epoch 68/100\n","17/17 [==============================] - 12s 701ms/step - loss: 0.0359 - accuracy: 0.9937\n","Epoch 69/100\n","17/17 [==============================] - 12s 707ms/step - loss: 0.0390 - accuracy: 0.9932\n","Epoch 70/100\n","17/17 [==============================] - 12s 706ms/step - loss: 0.0344 - accuracy: 0.9952\n","Epoch 71/100\n","17/17 [==============================] - 12s 704ms/step - loss: 0.0561 - accuracy: 0.9908\n","Epoch 72/100\n","17/17 [==============================] - 12s 699ms/step - loss: 0.0792 - accuracy: 0.9796\n","Epoch 73/100\n","17/17 [==============================] - 12s 698ms/step - loss: 0.0612 - accuracy: 0.9864\n","Epoch 74/100\n","17/17 [==============================] - 13s 728ms/step - loss: 0.0432 - accuracy: 0.9926\n","Epoch 75/100\n","17/17 [==============================] - 12s 696ms/step - loss: 0.0401 - accuracy: 0.9927\n","Epoch 76/100\n","17/17 [==============================] - 12s 694ms/step - loss: 0.0394 - accuracy: 0.9927\n","Epoch 77/100\n","17/17 [==============================] - 12s 693ms/step - loss: 0.0427 - accuracy: 0.9898\n","Epoch 78/100\n","17/17 [==============================] - 12s 695ms/step - loss: 0.0330 - accuracy: 0.9947\n","Epoch 79/100\n","17/17 [==============================] - 12s 696ms/step - loss: 0.0353 - accuracy: 0.9947\n","Epoch 80/100\n","17/17 [==============================] - 12s 700ms/step - loss: 0.0214 - accuracy: 0.9966\n","Epoch 81/100\n","17/17 [==============================] - 13s 729ms/step - loss: 0.0199 - accuracy: 0.9972\n","Epoch 82/100\n","17/17 [==============================] - 12s 700ms/step - loss: 0.0352 - accuracy: 0.9913\n","Epoch 83/100\n","17/17 [==============================] - 12s 698ms/step - loss: 0.0354 - accuracy: 0.9918\n","Epoch 84/100\n","17/17 [==============================] - 12s 695ms/step - loss: 0.0187 - accuracy: 0.9976\n","Epoch 85/100\n","17/17 [==============================] - 12s 703ms/step - loss: 0.0169 - accuracy: 0.9981\n","Epoch 86/100\n","17/17 [==============================] - 12s 697ms/step - loss: 0.0128 - accuracy: 0.9985\n","Epoch 87/100\n","17/17 [==============================] - 12s 703ms/step - loss: 0.0151 - accuracy: 0.9981\n","Epoch 88/100\n","17/17 [==============================] - 12s 702ms/step - loss: 0.0111 - accuracy: 0.9985\n","Epoch 89/100\n","17/17 [==============================] - 12s 705ms/step - loss: 0.0140 - accuracy: 0.9976\n","Epoch 90/100\n","17/17 [==============================] - 12s 717ms/step - loss: 0.0463 - accuracy: 0.9898\n","Epoch 91/100\n","17/17 [==============================] - 12s 713ms/step - loss: 0.0566 - accuracy: 0.9864\n","Epoch 92/100\n","17/17 [==============================] - 12s 720ms/step - loss: 0.0481 - accuracy: 0.9918\n","Epoch 93/100\n","17/17 [==============================] - 12s 711ms/step - loss: 0.0280 - accuracy: 0.9966\n","Epoch 94/100\n","17/17 [==============================] - 12s 707ms/step - loss: 0.0187 - accuracy: 0.9966\n","Epoch 95/100\n","17/17 [==============================] - 12s 700ms/step - loss: 0.0121 - accuracy: 0.9995\n","Epoch 96/100\n","17/17 [==============================] - 14s 793ms/step - loss: 0.0101 - accuracy: 0.9981\n","Epoch 97/100\n","17/17 [==============================] - 12s 702ms/step - loss: 0.0099 - accuracy: 0.9995\n","Epoch 98/100\n","17/17 [==============================] - 12s 701ms/step - loss: 0.0308 - accuracy: 0.9956\n","Epoch 99/100\n","17/17 [==============================] - 12s 702ms/step - loss: 0.0407 - accuracy: 0.9893\n","Epoch 100/100\n","17/17 [==============================] - 12s 716ms/step - loss: 0.0582 - accuracy: 0.9859\n"]}]},{"cell_type":"code","source":["# save model\n","model.save('/content/drive/MyDrive/大四(下)/機器學習/orchid/trained_model.h5')"],"metadata":{"id":"zZ3VlCE1hQew"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# getting predictions on val set.\n","pred=model.predict(x_test)\n","pred_digits=np.argmax(pred,axis=1)\n","\n","# now storing some properly as well as misclassified indexes'.\n","i=0\n","prop_class=[]\n","mis_class=[]\n","\n","for i in range(len(y_test)):\n","    if(np.argmax(y_test[i])==pred_digits[i]):\n","        prop_class.append(i)\n","\n","i=0\n","for i in range(len(y_test)):\n","    if(not np.argmax(y_test[i])==pred_digits[i]):\n","        mis_class.append(i)\n","\n","print(len(prop_class), len(mis_class))\n","print(len(prop_class)/len(y_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TIr2WoVAFZLq","executionInfo":{"status":"ok","timestamp":1654868334447,"user_tz":-480,"elapsed":4515,"user":{"displayName":"林翊婷","userId":"17064522885913402879"}},"outputId":"3647fac6-1ab5-44d6-f9b2-30a90db1f3d1"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["544 4\n","0.9927007299270073\n"]}]},{"metadata":{"_uuid":"9545f9161aa1643df2c00753121bb87b7a7c87d6","id":"24-F92u2G33t"},"cell_type":"markdown","source":["#### Note that the validation accuracy on fine tuning by unfreezing the last block of the VGG16 model has increased to about 81% ; almost by 3% as compared to the case when we run a classifier on the top of the CNN codes in previous section."]},{"metadata":{"id":"fhEnWLenslUN","trusted":true,"_uuid":"131a4ba19320a3fde1e5a485cd1d77e2af48ae88","colab":{"base_uri":"https://localhost:8080/","height":317},"executionInfo":{"status":"ok","timestamp":1654868477191,"user_tz":-480,"elapsed":1007,"user":{"displayName":"林翊婷","userId":"17064522885913402879"}},"outputId":"bc99c2d0-8768-4cf1-9ae4-e30dc635504c"},"cell_type":"code","source":["plt.plot(History.history['accuracy'])\n","plt.title('Model Accuracy')\n","plt.ylabel('Accuracy')\n","plt.xlabel('Epochs')\n","plt.legend(['train'])\n","# plt.show()\n","\n","plt.savefig(f\"/content/drive/MyDrive/大四(下)/機器學習/orchid/accu.png\")"],"execution_count":25,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"metadata":{"id":"QYuLuLAQslnF","trusted":true,"_uuid":"954611cab64452acf57fb7dd4c08c4ffc6e1812f","colab":{"base_uri":"https://localhost:8080/","height":317},"executionInfo":{"status":"ok","timestamp":1654868487890,"user_tz":-480,"elapsed":672,"user":{"displayName":"林翊婷","userId":"17064522885913402879"}},"outputId":"c475d760-bb7e-42f6-f992-0926cb8fb46d"},"cell_type":"code","source":["plt.plot(History.history['loss'])\n","plt.title('Model Loss')\n","plt.ylabel('Loss')\n","plt.xlabel('Epochs')\n","plt.legend(['train'])\n","# plt.show()\n","\n","plt.savefig(f\"/content/drive/MyDrive/大四(下)/機器學習/orchid/loss.png\")"],"execution_count":26,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["6KWeOmI1G33T","HVnHjj1cG33d","Nd6pizEdG33m"],"name":"team185_train","provenance":[{"file_id":"17_JXd2IRAmF-4eh43E9tFj3T13m1Njiu","timestamp":1654841329933}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.6.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat":4,"nbformat_minor":0}